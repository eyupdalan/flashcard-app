import type {NextPage} from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {
    CommandBar,
    DefaultButton,
    DetailsList,
    DialogFooter,
    IColumn,
    ICommandBarItemProps,
    Panel,
    PanelType,
    PrimaryButton,
    TextField
} from "@fluentui/react";
import {useBoolean} from "@fluentui/react-hooks";
import useSWR, {useSWRConfig} from 'swr';
import {useState} from "react";
import LoginButton from "../components/loginButton";

// @ts-ignore
const fetcher = (...args) => fetch(...args).then(res => res.json());

const Home: NextPage = () => {
    const {mutate} = useSWRConfig()

    const [isOpen, {setTrue: openPanel, setFalse: dismissPanel}] = useBoolean(false);
    const [showAddModal, setShowAddModal] = useState<boolean>(false);

    const [front, setFront] = useState<string | undefined>(undefined);
    const [back, setBack] = useState<string | undefined>(undefined);
    const [hint, setHint] = useState<string | undefined>(undefined);

    const {data, error} = useSWR('/api/cards', fetcher)

    const addCard = async () => {
        const item = {
            type: 1,
            front,
            back,
            hint,
            known: false
        }

        return await fetch("/api/cards", {
            headers: {
                'Content-Type': 'application/json'
            },
            method: "POST",
            body: JSON.stringify(item)
        });
    }

    const onClickAdd = () => setShowAddModal(!showAddModal);

    const onClickAddCard = () => {
        mutate("/api/cards", addCard(), {optimisticData: data, rollbackOnError: true});
        setShowAddModal(!showAddModal);
    }

    const columns: IColumn[] = [
        {
            key: "id",
            name: "ID",
            fieldName: "id",
            minWidth: 50
        },
        {
            key: "type",
            name: "tip",
            fieldName: "type",
            minWidth: 50
        },
        {
            key: "front",
            name: "Ön",
            fieldName: "front",
            minWidth: 300
        },
        {
            key: "back",
            name: "Arka",
            fieldName: "back",
            minWidth: 300
        },
        {
            key: "known",
            name: "Bilinen",
            fieldName: "known",
            minWidth: 50
        },
        {
            key: "hint",
            name: "İpucu",
            fieldName: "hint",
            minWidth: 300
        }
    ]

    const commandBarItems: ICommandBarItemProps[] = [
        {
            key: 'newItem',
            text: 'Ekle',
            iconProps: {iconName: 'Add'},
            onClick: openPanel
        },
    ];

    const farCommandBarItems: ICommandBarItemProps[] = [
        {
            key: "login",
            commandBarButtonAs: LoginButton
        },
    ]

    if (error) {
        return <div>failed to load</div>
    }

    if (!data) {
        return <div>loading...</div>
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Flash Card App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={styles.main}>
                <CommandBar items={commandBarItems} farItems={farCommandBarItems} style={{width: "100%"}}/>
                <DetailsList items={data} columns={columns}/>
            </main>

            <Panel
                isLightDismiss
                isOpen={isOpen}
                onDismiss={dismissPanel}
                type={PanelType.medium}
            >
                <TextField
                    label="Kartın Ön Yüzü"
                    multiline
                    rows={5}
                    onChange={(e, value) => setFront(value)}
                />
                <TextField
                    label="Kartın Arka Yüzü"
                    multiline
                    rows={5}
                    onChange={(e, value) => setBack(value)}
                />
                <TextField
                    label="İpucu"
                    multiline
                    rows={5}
                    onChange={(e, value) => setHint(value)}
                />
                <DialogFooter>
                    <DefaultButton onClick={onClickAdd} text="İptal"/>
                    <PrimaryButton onClick={onClickAddCard} text="Kaydet"/>
                </DialogFooter>
            </Panel>


            <footer className={styles.footer}>
                Flashcard App
            </footer>
        </div>
    )
}

export default Home
